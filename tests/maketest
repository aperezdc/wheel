#! /bin/bash
set -e

set -- "$1" "$(basename "$1")"

suite_of_filename ()
{
	local n=${1#check-}
	echo "${n%.c}"
}


pick_test_names () {
	# We need to preprocess the source, as code for a number of checks is
	# autogenerated from macros. This is more generic and reliable.
	cpp -I. "$1" | \
	sed -e '/^static void test_/s/static void \([^[:space:]]\+\).*/\1/p' -e d
}


suite=$(suite_of_filename "$2")


cat <<EOF
#include "$(basename $1)"

Suite*
make_${suite}_suite (void)
{
    Suite *s = suite_create ("${suite}");
    TCase *c = NULL;
EOF

oldtcase=''
while read -r testname ; do
	funcname=${testname}
	testname=${testname#test_}
	testcase=${testname#*_}
	testcase=${testcase%%_*}

	if [[ ${oldtcase} != ${testcase} ]] ; then
		echo "    if (c) suite_add_tcase (s, c);"
		echo "    c = tcase_create (\"${testcase}\");"
	fi
	echo "    tcase_add_test (c, ${funcname});"

done < <( pick_test_names "$1" | sort)

echo "    if (c) suite_add_tcase (s, c);"

cat <<EOF
    return s;
}


#ifndef TEST_NO_MAIN
int main (void)
{
    int nfail;
    Suite *s = make_${suite}_suite ();
    SRunner *r = srunner_create (s);

    srunner_run_all (r, CK_NORMAL);
    nfail = srunner_ntests_failed (r);
    srunner_free (r);

    return (nfail == 0) ? EXIT_SUCCESS : EXIT_FAILURE;
}
#endif /* !TEST_NO_MAIN */
EOF

